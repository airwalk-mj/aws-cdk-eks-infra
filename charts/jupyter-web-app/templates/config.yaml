apiVersion: v1
data:
  spawner_ui_config.yaml: |
    # Configuration file for the Jupyter UI.
    #
    # Each Jupyter UI option is configured by two keys: 'value' and 'readOnly'
    # - The 'value' key contains the default value
    # - The 'readOnly' key determines if the option will be available to users
    #
    # If the 'readOnly' key is present and set to 'true', the respective option
    # will be disabled for users and only set by the admin. Also when a
    # Notebook is POSTED to the API if a necessary field is not present then
    # the value from the config will be used.
    #
    # If the 'readOnly' key is missing (defaults to 'false'), the respective option
    # will be available for users to edit.
    #
    # Note that some values can be templated. Such values are the names of the
    # Volumes as well as their StorageClass
    spawnerFormDefaults:
      image:
        # The container Image for the user's Jupyter Notebook
        value: {{ .Values.config.spawnerFormDefaults.image.value }}
        # The list of available standard container Images
        options:
        {{ range .Values.config.spawnerFormDefaults.image.options }}
        - {{ . }}
        {{- end }}
      imageGroupOne:
        # The container Image for the user's Group One Server
        # The annotation `notebooks.kubeflow.org/http-rewrite-uri: /`
        # is applied to notebook in this group, configuring
        # the Istio rewrite for containers that host their web UI at `/`
        value: {{ .Values.config.spawnerFormDefaults.imageGroupOne.value }}
        # The list of available standard container Images
        options:
        {{ range .Values.config.spawnerFormDefaults.imageGroupOne.options }}
        - {{ . }}
        {{- end }}
      imageGroupTwo:
        # The container Image for the user's Group Two Server
        # The annotation `notebooks.kubeflow.org/http-rewrite-uri: /`
        # is applied to notebook in this group, configuring
        # the Istio rewrite for containers that host their web UI at `/`
        # The annotation `notebooks.kubeflow.org/http-headers-request-set`
        # is applied to notebook in this group, configuring Istio
        # to add the `X-RStudio-Root-Path` header to requests
        value: {{ .Values.config.spawnerFormDefaults.imageGroupTwo.value }}
        # The list of available standard container Images
        options:
        {{ range .Values.config.spawnerFormDefaults.imageGroupTwo.options }}
        - {{ . }}
        {{- end }}
      allowCustomImage: {{ .Values.config.spawnerFormDefaults.allowCustomImage }}
      imagePullPolicy:
        value: {{ .Values.config.spawnerFormDefaults.imagePullPolicy.value }}
        readOnly: {{ .Values.config.spawnerFormDefaults.imagePullPolicy.readOnly }}
      cpu:
        # CPU for user's Notebook
        value: {{ .Values.config.spawnerFormDefaults.cpu.value | squote }}
        # Factor by with to multiply request to calculate limit
        # if no limit is set, to disable set "none"
        limitFactor: {{ .Values.config.spawnerFormDefaults.cpu.limitFactor | quote }}
        readOnly: {{ .Values.config.spawnerFormDefaults.cpu.readOnly }}
      memory:
        # Memory for user's Notebook
        value: {{ .Values.config.spawnerFormDefaults.memory.value }}
        # Factor by with to multiply request to calculate limit
        # if no limit is set, to disable set "none"
        limitFactor: {{ .Values.config.spawnerFormDefaults.memory.limitFactor | quote }}
        readOnly: {{ .Values.config.spawnerFormDefaults.memory.readOnly }}
      workspaceVolume:
        # Workspace Volume to be attached to user's Notebook
        # Each Workspace Volume is declared with the following attributes:
        # Type, Name, Size, MountPath and Access Mode
        value:
          type:
            # The Type of the Workspace Volume
            # Supported values: 'New', 'Existing'
            value: {{ .Values.config.spawnerFormDefaults.workspaceVolume.value.type }}
          name:
            # The Name of the Workspace Volume
            # Note that this is a templated value. Special values:
            # {notebook-name}: Replaced with the name of the Notebook. The frontend
            #                  will replace this value as the user types the name
            value: {{ .Values.config.spawnerFormDefaults.workspaceVolume.value.name | squote }}
          size:
            # The Size of the Workspace Volume (in Gi)
            value: {{ .Values.config.spawnerFormDefaults.workspaceVolume.value.size | squote }}
          mountPath:
            # The Path that the Workspace Volume will be mounted
            value: {{ .Values.config.spawnerFormDefaults.workspaceVolume.value.mountPath }}
          accessModes:
            # The Access Mode of the Workspace Volume
            # Supported values: 'ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany'
            value: {{ .Values.config.spawnerFormDefaults.workspaceVolume.value.accessModes }}
          class:
            # The StrageClass the PVC will use if type is New. Special values are:
            # {none}: default StorageClass
            # {empty}: empty string ""
            value: {{ .Values.config.spawnerFormDefaults.workspaceVolume.value.class | squote }}
        readOnly: false
      dataVolumes:
        # List of additional Data Volumes to be attached to the user's Notebook
        value: {{ .Values.config.spawnerFormDefaults.dataVolumes.value }}
        # Each Data Volume is declared with the following attributes:
        # Type, Name, Size, MountPath and Access Mode
        #
        # For example, a list with 2 Data Volumes:
        # value:
        #   - value:
        #       type:
        #         value: New
        #       name:
        #         value: '{notebook-name}-vol-1'
        #       size:
        #         value: '10Gi'
        #       class:
        #         value: standard
        #       mountPath:
        #         value: /home/jovyan/vol-1
        #       accessModes:
        #         value: ReadWriteOnce
        #       class:
        #         value: {none}
        #   - value:
        #       type:
        #         value: New
        #       name:
        #         value: '{notebook-name}-vol-2'
        #       size:
        #         value: '10Gi'
        #       mountPath:
        #         value: /home/jovyan/vol-2
        #       accessModes:
        #         value: ReadWriteMany
        #       class:
        #         value: {none}
        readOnly: {{ .Values.config.spawnerFormDefaults.dataVolumes.readOnly }}
      gpus:
        # Number of GPUs to be assigned to the Notebook Container
        value:
          # values: "none", "1", "2", "4", "8"
          num: {{ .Values.config.spawnerFormDefaults.gpus.value.num | quote }}
          # Determines what the UI will show and send to the backend
          vendors:
          {{- with .Values.config.spawnerFormDefaults.gpus.value.vendors }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
          # Values: "" or a `limits-key` from the vendors list
          vendor: {{ .Values.config.spawnerFormDefaults.gpus.value.vendor | quote }}
        readOnly: {{ .Values.config.spawnerFormDefaults.gpus.readOnly }}
      shm:
        value: {{ .Values.config.spawnerFormDefaults.shm.value }}
        readOnly: {{ .Values.config.spawnerFormDefaults.shm.readOnly }}
      configurations:
        # List of labels to be selected, these are the labels from PodDefaults
        # value:
        #   - add-gcp-secret
        #   - default-editor
        value: {{ .Values.config.spawnerFormDefaults.configurations.value }}
        readOnly: {{ .Values.config.spawnerFormDefaults.configurations.readOnly }}
      affinityConfig:
        # The default `configKey` from the options list
        # If readonly, the default value will be the only option
        value: {{ .Values.config.spawnerFormDefaults.affinityConfig.value | quote }}
        # The list of available affinity configs
        options: {{ .Values.config.spawnerFormDefaults.affinityConfig.options }}
        # # (DESC) Pod gets an exclusive "n1-standard-2" Node
        # # (TIP) set PreferNoSchedule taint on this node-pool
        # # (TIP) enable cluster-autoscaler on this node-pool
        # # (TIP) dont let users request more CPU/MEMORY than the size of this node
        # - configKey: "exclusive__n1-standard-2"
        #   displayName: "Exclusive: n1-standard-2"
        #   affinity:
        #     # (Require) Node having label: `node_pool=notebook-n1-standard-2`
        #     nodeAffinity:
        #       requiredDuringSchedulingIgnoredDuringExecution:
        #         nodeSelectorTerms:
        #           - matchExpressions:
        #               - key: "node_pool"
        #                 operator: "In"
        #                 values:
        #                   - "notebook-n1-standard-2"
        #     # (Require) Node WITHOUT existing Pod having label: `notebook-name`
        #     podAntiAffinity:
        #       requiredDuringSchedulingIgnoredDuringExecution:
        #         - labelSelector:
        #             matchExpressions:
        #               - key: "notebook-name"
        #                 operator: "Exists"
        #           namespaces: []
        #           topologyKey: "kubernetes.io/hostname"
        readOnly: {{ .Values.config.spawnerFormDefaults.affinityConfig.readOnly }}
      tolerationGroup:
        # The default `groupKey` from the options list
        # If readonly, the default value will be the only option
        value: {{ .Values.config.spawnerFormDefaults.tolerationGroup.value | quote }}
        # The list of available tolerationGroup configs
        options: {{ .Values.config.spawnerFormDefaults.tolerationGroup.options }}
        # - groupKey: "group_1"
        #   displayName: "Group 1: description"
        #   tolerations:
        #     - key: "key1"
        #       operator: "Equal"
        #       value: "value1"
        #       effect: "NoSchedule"
        #     - key: "key2"
        #       operator: "Equal"
        #       value: "value2"
        #       effect: "NoSchedule"
        readOnly: {{ .Values.config.spawnerFormDefaults.tolerationGroup.readOnly }}
kind: ConfigMap
metadata:
  labels:
    {{- include "jupyter-web-app.labels" . | nindent 4 }}
    {{- with .Values.appLabels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  name: {{ include "jupyter-web-app.fullname" . }}-web-app-config